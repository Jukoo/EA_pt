#!/bin/bash 
#############################
#  DO NOT  EDIT THIS FILE  
#  REFERT TO THE CONGIF FILE 
#  TO MAKE CHANGE  OR IF YOU HAVE 
#  A KNOWLEGE ABOUT BASH PROGRAMMING 
#  YOU CAN GO AHEAD  
######################################

#!  you need to  run this script as root 
# the configuration use letsencrypt too ssl certification 


ERR_SHELL_OUT=$((2#0001))
UID_ROOT=$((0x0))
ERR_NO_ROOT=$((0x3E8))
ubin=/usr/bin/ 
conf_dir=/etc/  
DNSMSK=dnsmasq 
var_run=/var/run/
SSL_letsEncrypt=letsencrypt  
dir_src_load=https://github.com 
letsencrypt_default_dir=/opt/$SSL_letsEncrypt
srv_cf=site.conf
ssl_default_conf=ssl.conf

declare -a libspkgs 
libspkgs=( 
    "git"          # fast, scalable, distributed revision control system [prioritary] 
    "apache2"      # Apache Http Server 
    "php7.0-curl"  # CURL  Module for Php 
    "php7.0-fpm"   # Server-side HTML-embedded scripting language (FPM-CGI binary) 
)
declare -r libspkgs #locked to read only immutable 
dir_ssl_setup=$conf_dir${libspkgs[1]}/sites-available/ 

pi::pkgMan () {
    local raspack=$(find ${ubin} -name aptitude | cut -d"/" -f4) 
    echo ${raspack::3}  
} 


:initscaling: (){
    if [[ ${UID} -eq $UID_ROOT ]] ; then 
        return $UID 
    else 
      bail "[only root  is allowed to run the script]" $ERR_NO_ROOT
    fi 
}

# look up the usuall emplacement of exec commande 
# when the commande  wasn't found i'll well be automaticli downlaoded 
# from package manager 
libspkgs-Install() { 
    local pretended_dir_loc 
    declare -A pretended_dir_loc             
    pretended_dir_loc=(
        [ubindir]=$ubin 
        [confdir]=$conf_dir 
    )  
    if [[ ! -f  .globalCache/.beecache ]] ; then 

        prompt "installing missing package running in backgroung "
        prompt "please wait"  
        for  lib in ${libspkgs[@]} ; do 
            for  suspected_dir in ${pretended_dir_loc[@]} ; do
              
                if [[ -z $(find $suspected_dir -name ${lib})  ]] ; then 
                    #echo  "sudo pi::pkgMan install $lib"
                    sudo $(pi::pkgMan) install $lib --assume-yes
                    sleep 2 
                else 
                    prompt "[ $lib is already installed ]" 
                fi 
            done 
        done
        test $? -eq 0 &&  build_cache_file 
    else 
        prompt "all required libs ate installed"
    fi 
} 


  #######   #######
####  +w conf    ####
  #######   #######
{ #Configuration Namespace 
  function targetbinded  {
     # fudge 10 .3 "bingind $DNSMSK hosting"
echo "no-hosts 
addn-hosts=${var_run}$DNSMSK/hosts" 
  } 

  function  host_data {  
   #fudge  15 .2 "writing  targeted host data"
echo "127.0.0.1       honey.pot
172.16.0.1      www.facebook.com
172.16.0.1      m.facebook.com
172.16.0.1      facebook.com 
">$1 
 }

  enable_dnsmasq_conf () {  
    prompt "writing  headline"  ; sleep 2 
    if [[ -f ${conf_dir}$DNSMSK.conf ]] ; then 
        local file_size=$(wc  ${conf_dir}$DNSMSK.conf | cut -d " " -f2 ) 
        [[ $file_size -ne 0 ]] && {
        prompt "$file_size line was pirnted in this file "
    }||{ 
        targetbinded  >  ${conf_dir}$DNSMSK.conf 
    } 
    else 
        $(targetbinded > ${conf_dir}$DNSMSK.conf) 
    fi  
  } 

  dnsmask_hosts(){ 

    if [[ -d ${var_run}$DNSMSK  ]] ; then  
        [[ $host_file_size -ne 0  ]] && [[  -f $var_run$DNSMSK/host ]] && {
        local host_file_size=$(wc ${var_run}$DNSMSK/hosts | cut -d " " -f3 )
          prompt "$host_file_size lines was affected " 
        } || {
          prompt "write target hosted " sleep 2 
          host_data  ${var_run}$DNSMSK/hosts 
        } 
    else
        mkdir ${var_run}$DNSMSK 
        dnsmask_hosts 
    fi  
  } 

}
###########################################
#  Internal function logical core of      #
#       beehive script runtime            #
########################################### 

  
function third_party_certificate_installation {
    #creating hiden cache file 
    local letscache=tpci_letsenc 
    if [[ ! -d  $letsencrypt_default_dir ]] ; then 
        sudo ${libspkgs[0]} clone $dir_src_load/$SSL_letsEncrypt/${SSL_letsEncrypt} $letsencrypt_default_dir 
        [ $? -eq 0 ] && build_cache_file $letscache 
        prompt " pointing to %$letsencrypt_default_dir" 
        auto:update:letsencrypt: 
        apache2_service halt # stop apache2 service 
        prompt "certificate setup" 
      else 
        prompt " letsencrypt module available" 
    fi 

    if [[ ! -f $dir_ssl_setup$srv_cf ]] ; then 
            tranfer_default_conf_to $dir_ssl_setup$srv_cf  
            prompt "writing ssl certification" 
            edit_ssl_conf
        else 
            prompt "the certificate is already set" 
            prompt "check this directory -> $letsencrypt_default_dir" 
     fi  

}


function tranfer_default_conf_to {
    #required only 1 argument 
    if [[ -n $1 ]]  ; then 
        prompt "looking $ssl_default_conf ... "   
        cat ${ssl_default_conf} > $1 
        test $? -eq 0 || bail "$ssl_default_conf no found" 
    else 
        bail "IO_file write error... no arg found" 
    fi 
}
function edit_ssl_conf { 
    prompt "[no escape] please specify all request information asked"
    declare -A inputrequest 
    inputrequest=(
        [server_admin_email_contact]="your-email-address" 
        [server_name]="your-server-name" 
        [domaine_name]="your-domaine-name" 
    ) 
    declare  -a response  default_partern 
    default_partern=(
    "VOTRE_ADRESSE_MAIL" 
    "VOTRE_NOM_DE_SERVER"
    "VOTRE_NOM_DE_DOMAINE"
    )
    for request in ${inputrequest[@]} ; do
        read -p "$request : " current_res 
        if [[ -n $current_res ]] ; then  
            response+=("$current_res") 
        fi 
    done  
    { # information dispatching 
        for(( i=0  ; i < ${#default_partern[@]} ; i++)) ; do 
            sed  -i s/${default_partern[$i]}/${response[$i]}/g $dir_ssl_setup$srv_cf 
        done 
    }

}
function auto:update:letsencrypt: {
    local cwd=$(pwd) 
    cd $letsencrypt_default_dir 
    [ $? -eq 0 ] && {
        #fudge 12 .3 lvl_up_letsencrypt 
        git pull 
        [ $? -eq 0 ] && prompt "okay well done " ; $(cd $cwd) 
    } || {
       bail "cannot change the directory "
    }  
} 

function apache2_service {
     declare -a cID 
     cID=$(pidof $libspkgs[2]) 
      if [[ -n $1 ]]&&[[ $1 == "start" ]]
      then 
            sudo service  ${libspkgs[1]} $1  
            test $? -eq 0 && prompt "${libspkgs[1]} successfully started" 
            fudge 12 .2 collecting_pid_service_started_from  
            for pid_service in $cID ; do 
                prompt "[ $pid_service ]  started " 
                sleep 2 
            done 
      elif [[ -n $1  ]] && [[ $1 == "halt" ]] ; then  
           sudo service ${libspkgs[1]}  $1 
           prompt "deleting underproccess of  ${libspkgs[1]}"
           for pid_service in $cID ; do 
               prompt "[ $pid_service ]  -> dead "  
               sleep 2 
           done
      else 
       bail " bad arguments "     
      fi 
} 


function build_cache_file  { 
    local GC=.globalCache  
    if [[  ! -d $GC ]] ;then 
        mkdir $GC
    fi 
    local DEFAULT_FILE_CACHE=".beecache"  # the default cache file used if no param defined 
    if [[  -n  $1 ]] ; then 
       touch "$GC/.$1" 
   else 
       touch $GC/$DEFAULT_FILE_CACHE 
    fi  
} 
function printHeadscript {
    sed -n 1,8p $0 
}

function prompt {
    if  [[ -n $1 ]] ; then 
        echo  -e "* $1" 
    else  
        echo -e "..."
    fi 
}

function bail {
    if [[ -z $1 ]] ; then 
       prompt " something wrong" 
       exit $ERR_SHELL_OUT
   else
       if [[ -n $2 ]] ; then 
         prompt "$1" ; exit $2 
       fi   
      prompt "$1" ; exit $ERR_SHELL_OUT  
  fi
}

function cache_deposit {
    if [[ ! -f .globalCache ]] ; then 
        prompt " initialize global cache" 
        fudge  12 .2 "init cache folder "
        mkdir .globalCache 
    else 
        prompt "cache dir checked "
    fi 
}

fudge() { 

    local char="â–‡" 
    local Limite_rate=100
    local stater=0
    local status="" 
    [[ -n $2 ]] && { 
        sleep $2
    }|| {
        echo "rock yourself " 
        return 0 
    }
    [[ -n $3 ]] && prompt "$3..." 
    echo -en "$b_CGSC|"
    while [ $Limite_rate -gt $1 ] ; do
        printf  "$char" && sleep $2 
        starter=$((starter +1)) 
        if [[  $starter -eq $1 ]] ; then 
            echo -en "|   100 % [done] $CDEF"
            echo 
            return 0 
        fi 
    done

}
{
    automate_testing_system (){ 
        local bats_exec=$(find $ubin -name bats)
        declare -r bats_exec  
        if [[  ${bats_exec##*/} == "bats" ]] ; then    
            return 0  # bats command test found 
        else 
            prompt "bats cmd not found" 
            read -p "would you like to install bats cmd exec[Yy|Nn]"  
            case $REPLY in 
                [yes]|[Yy]|[Es]|[Ss])
                    sudo $(pi::pkgMan) install ${bats_exec##*/} --assume-yes ;;
                *) exit 1 ;; 
            esac
        fi  
    } 

    arguments_parser() { 
        if [[ -n $1  ]]
        then 
           return 0 
        fi  
    } 

}

